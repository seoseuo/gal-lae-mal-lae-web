# github repository actions 페이지에 나타날 이름
name: CI/CD using GitHub Actions & Docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
       # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # gradle caching - 빌드 시간 향상
      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle
      # 환경별 yml 파일 생성(1) - application.yml
      - name: Make application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.YML }}" > src/main/resources/application.yml
          
      # 환경별 yml 파일 생성(1) - application-aws.yml
      - name: Make application-aws.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.YML_AWS }}" > src/main/resources/application-aws.yml

      - name: Build project
        run: ./gradlew build -x test

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build & Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/wannago .
          docker push ${{ secrets.DOCKER_USERNAME }}/wannago:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            mkdir -p ~/wannago-deploy/nginx/conf.d && cd ~/wannago-deploy

            # 최신 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/wannago

            # Nginx default.conf 생성
            cat <<EONGINX > nginx/conf.d/default.conf
            server {
              listen 80;
            
              location / {
                proxy_pass http://wannago-app:8080;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_connect_timeout       1200;
                proxy_send_timeout          1200;
                proxy_read_timeout          1200;
                send_timeout                1200;
              }
            
              location /ws/ {
                proxy_pass http://wannago-app:8080/ws/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_read_timeout 60s;
              }
            }
            EONGINX


            # docker-compose.yml 생성
            cat <<EOF > docker-compose.yml
            version: '3'
            services:
              redis:
                image: redis:alpine
                container_name: redis
                restart: unless-stopped
                ports:
                  - "6379:6379"
                mem_limit: 128m
                cpus: 0.2

              db:
                image: mysql:8
                container_name: mysql-db
                restart: unless-stopped
                ports:
                  - "3306:3306"
                environment:
                  MYSQL_DATABASE: wannago
                  MYSQL_USER: wannago_user
                  MYSQL_PASSWORD: wannago_pass
                  MYSQL_ROOT_PASSWORD: rootpass
                volumes:
                  - mysql-data:/var/lib/mysql
                mem_limit: 512m
                cpus: 0.3

              app:
                image: ${{ secrets.DOCKER_USERNAME }}/wannago
                container_name: wannago-app
                restart: unless-stopped
                expose:
                  - "8080"
                depends_on:
                  - db
                  - redis
                environment:
                  SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/wannago
                  SPRING_DATASOURCE_USERNAME: wannago_user
                  SPRING_DATASOURCE_PASSWORD: wannago_pass
                  SPRING_REDIS_HOST: redis
                  SPRING_REDIS_PORT: 6379
                mem_limit: 768m
                cpus: 0.4

              nginx:
                image: nginx:latest
                container_name: nginx-proxy
                restart: unless-stopped
                ports:
                  - "80:80"
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d:ro
                depends_on:
                  - app

            volumes:
              mysql-data:
            EOF

            docker compose down
            docker compose up -d

